name: todo-app
on: [push,workflow_dispatch]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Check directory structure
        run: ls
      - name: Check path structure
        run: ls -l TodoApp
      - name: Run Tests
        run: |
          pytest --disable-warnings --cov=./TodoApp TodoApp/test/
      - name: Save coverage report
        run: |
          pytest --cov=TodoApp --cov-report=xml > coverage.xml

  build_and_push_docker_image:
    name: Build and Dockerize
    runs-on: ubuntu-latest
    needs: test
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: log in Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get commit id
        id: commit_hash
        run: echo "::set-output name=commit_hash::$(git rev-parse HEAD)"
      - name: Build Docker image in Github container registry
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/todoapp:${{ github.run_id }}-${{ steps.commit_hash.outputs.commit_hash }} .
      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/todoapp:${{ github.run_id }}-${{ steps.commit_hash.outputs.commit_hash }}
  sonarqube_analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build_and_push_docker_image
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run SonarQube analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}